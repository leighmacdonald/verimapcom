// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/rpc.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EventType int32

const (
	EventType_EVT_UNKNOWN     EventType = 0
	EventType_EVT_CONNECT     EventType = 1
	EventType_EVT_PING        EventType = 2
	EventType_EVT_PONG        EventType = 3
	EventType_EVT_MESSAGE     EventType = 10
	EventType_EVT_SET_MISSION EventType = 20
	EventType_EVT_ERROR       EventType = 1000
)

var EventType_name = map[int32]string{
	0:    "EVT_UNKNOWN",
	1:    "EVT_CONNECT",
	2:    "EVT_PING",
	3:    "EVT_PONG",
	10:   "EVT_MESSAGE",
	20:   "EVT_SET_MISSION",
	1000: "EVT_ERROR",
}

var EventType_value = map[string]int32{
	"EVT_UNKNOWN":     0,
	"EVT_CONNECT":     1,
	"EVT_PING":        2,
	"EVT_PONG":        3,
	"EVT_MESSAGE":     10,
	"EVT_SET_MISSION": 20,
	"EVT_ERROR":       1000,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}

func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3cea3ef5dc9ae365, []int{0}
}

type StatusReply_Status int32

const (
	StatusReply_OK    StatusReply_Status = 0
	StatusReply_ERROR StatusReply_Status = 1
)

var StatusReply_Status_name = map[int32]string{
	0: "OK",
	1: "ERROR",
}

var StatusReply_Status_value = map[string]int32{
	"OK":    0,
	"ERROR": 1,
}

func (x StatusReply_Status) String() string {
	return proto.EnumName(StatusReply_Status_name, int32(x))
}

func (StatusReply_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3cea3ef5dc9ae365, []int{11, 0}
}

type ProjectRequest struct {
	MissionId            int32    `protobuf:"varint,1,opt,name=mission_id,json=missionId,proto3" json:"mission_id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProjectRequest) Reset()         { *m = ProjectRequest{} }
func (m *ProjectRequest) String() string { return proto.CompactTextString(m) }
func (*ProjectRequest) ProtoMessage()    {}
func (*ProjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cea3ef5dc9ae365, []int{0}
}

func (m *ProjectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectRequest.Unmarshal(m, b)
}
func (m *ProjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectRequest.Marshal(b, m, deterministic)
}
func (m *ProjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectRequest.Merge(m, src)
}
func (m *ProjectRequest) XXX_Size() int {
	return xxx_messageInfo_ProjectRequest.Size(m)
}
func (m *ProjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectRequest proto.InternalMessageInfo

func (m *ProjectRequest) GetMissionId() int32 {
	if m != nil {
		return m.MissionId
	}
	return 0
}

func (m *ProjectRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ProjectReply struct {
	MissionId            int32    `protobuf:"varint,1,opt,name=mission_id,json=missionId,proto3" json:"mission_id,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProjectReply) Reset()         { *m = ProjectReply{} }
func (m *ProjectReply) String() string { return proto.CompactTextString(m) }
func (*ProjectReply) ProtoMessage()    {}
func (*ProjectReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cea3ef5dc9ae365, []int{1}
}

func (m *ProjectReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectReply.Unmarshal(m, b)
}
func (m *ProjectReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectReply.Marshal(b, m, deterministic)
}
func (m *ProjectReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectReply.Merge(m, src)
}
func (m *ProjectReply) XXX_Size() int {
	return xxx_messageInfo_ProjectReply.Size(m)
}
func (m *ProjectReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectReply.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectReply proto.InternalMessageInfo

func (m *ProjectReply) GetMissionId() int32 {
	if m != nil {
		return m.MissionId
	}
	return 0
}

func (m *ProjectReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PingRequest struct {
	At                   *timestamp.Timestamp `protobuf:"bytes,1,opt,name=at,proto3" json:"at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PingRequest) Reset()         { *m = PingRequest{} }
func (m *PingRequest) String() string { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()    {}
func (*PingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cea3ef5dc9ae365, []int{2}
}

func (m *PingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingRequest.Unmarshal(m, b)
}
func (m *PingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingRequest.Marshal(b, m, deterministic)
}
func (m *PingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingRequest.Merge(m, src)
}
func (m *PingRequest) XXX_Size() int {
	return xxx_messageInfo_PingRequest.Size(m)
}
func (m *PingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingRequest proto.InternalMessageInfo

func (m *PingRequest) GetAt() *timestamp.Timestamp {
	if m != nil {
		return m.At
	}
	return nil
}

type PingReply struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingReply) Reset()         { *m = PingReply{} }
func (m *PingReply) String() string { return proto.CompactTextString(m) }
func (*PingReply) ProtoMessage()    {}
func (*PingReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cea3ef5dc9ae365, []int{3}
}

func (m *PingReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingReply.Unmarshal(m, b)
}
func (m *PingReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingReply.Marshal(b, m, deterministic)
}
func (m *PingReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingReply.Merge(m, src)
}
func (m *PingReply) XXX_Size() int {
	return xxx_messageInfo_PingReply.Size(m)
}
func (m *PingReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PingReply.DiscardUnknown(m)
}

var xxx_messageInfo_PingReply proto.InternalMessageInfo

func (m *PingReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type SendPositionReply struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendPositionReply) Reset()         { *m = SendPositionReply{} }
func (m *SendPositionReply) String() string { return proto.CompactTextString(m) }
func (*SendPositionReply) ProtoMessage()    {}
func (*SendPositionReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cea3ef5dc9ae365, []int{4}
}

func (m *SendPositionReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendPositionReply.Unmarshal(m, b)
}
func (m *SendPositionReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendPositionReply.Marshal(b, m, deterministic)
}
func (m *SendPositionReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendPositionReply.Merge(m, src)
}
func (m *SendPositionReply) XXX_Size() int {
	return xxx_messageInfo_SendPositionReply.Size(m)
}
func (m *SendPositionReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SendPositionReply.DiscardUnknown(m)
}

var xxx_messageInfo_SendPositionReply proto.InternalMessageInfo

func (m *SendPositionReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type SendHotspotReply struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendHotspotReply) Reset()         { *m = SendHotspotReply{} }
func (m *SendHotspotReply) String() string { return proto.CompactTextString(m) }
func (*SendHotspotReply) ProtoMessage()    {}
func (*SendHotspotReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cea3ef5dc9ae365, []int{5}
}

func (m *SendHotspotReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendHotspotReply.Unmarshal(m, b)
}
func (m *SendHotspotReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendHotspotReply.Marshal(b, m, deterministic)
}
func (m *SendHotspotReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendHotspotReply.Merge(m, src)
}
func (m *SendHotspotReply) XXX_Size() int {
	return xxx_messageInfo_SendHotspotReply.Size(m)
}
func (m *SendHotspotReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SendHotspotReply.DiscardUnknown(m)
}

var xxx_messageInfo_SendHotspotReply proto.InternalMessageInfo

func (m *SendHotspotReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type FileUpload struct {
	MissionId            int32    `protobuf:"varint,1,opt,name=mission_id,json=missionId,proto3" json:"mission_id,omitempty"`
	FileName             string   `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileSize             int64    `protobuf:"varint,3,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	Data                 []byte   `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileUpload) Reset()         { *m = FileUpload{} }
func (m *FileUpload) String() string { return proto.CompactTextString(m) }
func (*FileUpload) ProtoMessage()    {}
func (*FileUpload) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cea3ef5dc9ae365, []int{6}
}

func (m *FileUpload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileUpload.Unmarshal(m, b)
}
func (m *FileUpload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileUpload.Marshal(b, m, deterministic)
}
func (m *FileUpload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileUpload.Merge(m, src)
}
func (m *FileUpload) XXX_Size() int {
	return xxx_messageInfo_FileUpload.Size(m)
}
func (m *FileUpload) XXX_DiscardUnknown() {
	xxx_messageInfo_FileUpload.DiscardUnknown(m)
}

var xxx_messageInfo_FileUpload proto.InternalMessageInfo

func (m *FileUpload) GetMissionId() int32 {
	if m != nil {
		return m.MissionId
	}
	return 0
}

func (m *FileUpload) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *FileUpload) GetFileSize() int64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *FileUpload) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type FileReply struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileReply) Reset()         { *m = FileReply{} }
func (m *FileReply) String() string { return proto.CompactTextString(m) }
func (*FileReply) ProtoMessage()    {}
func (*FileReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cea3ef5dc9ae365, []int{7}
}

func (m *FileReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileReply.Unmarshal(m, b)
}
func (m *FileReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileReply.Marshal(b, m, deterministic)
}
func (m *FileReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileReply.Merge(m, src)
}
func (m *FileReply) XXX_Size() int {
	return xxx_messageInfo_FileReply.Size(m)
}
func (m *FileReply) XXX_DiscardUnknown() {
	xxx_messageInfo_FileReply.DiscardUnknown(m)
}

var xxx_messageInfo_FileReply proto.InternalMessageInfo

func (m *FileReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type Location struct {
	Lat                  float64  `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon                  float64  `protobuf:"fixed64,2,opt,name=lon,proto3" json:"lon,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Location) Reset()         { *m = Location{} }
func (m *Location) String() string { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()    {}
func (*Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cea3ef5dc9ae365, []int{8}
}

func (m *Location) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Location.Unmarshal(m, b)
}
func (m *Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Location.Marshal(b, m, deterministic)
}
func (m *Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location.Merge(m, src)
}
func (m *Location) XXX_Size() int {
	return xxx_messageInfo_Location.Size(m)
}
func (m *Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Location.DiscardUnknown(m)
}

var xxx_messageInfo_Location proto.InternalMessageInfo

func (m *Location) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Location) GetLon() float64 {
	if m != nil {
		return m.Lon
	}
	return 0
}

type PositionEvent struct {
	MissionId            int32                `protobuf:"varint,1,opt,name=mission_id,json=missionId,proto3" json:"mission_id,omitempty"`
	At                   *timestamp.Timestamp `protobuf:"bytes,2,opt,name=at,proto3" json:"at,omitempty"`
	Location             *Location            `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	Elevation            int32                `protobuf:"varint,4,opt,name=elevation,proto3" json:"elevation,omitempty"`
	FlightId             int32                `protobuf:"varint,5,opt,name=flight_id,json=flightId,proto3" json:"flight_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PositionEvent) Reset()         { *m = PositionEvent{} }
func (m *PositionEvent) String() string { return proto.CompactTextString(m) }
func (*PositionEvent) ProtoMessage()    {}
func (*PositionEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cea3ef5dc9ae365, []int{9}
}

func (m *PositionEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PositionEvent.Unmarshal(m, b)
}
func (m *PositionEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PositionEvent.Marshal(b, m, deterministic)
}
func (m *PositionEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionEvent.Merge(m, src)
}
func (m *PositionEvent) XXX_Size() int {
	return xxx_messageInfo_PositionEvent.Size(m)
}
func (m *PositionEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionEvent.DiscardUnknown(m)
}

var xxx_messageInfo_PositionEvent proto.InternalMessageInfo

func (m *PositionEvent) GetMissionId() int32 {
	if m != nil {
		return m.MissionId
	}
	return 0
}

func (m *PositionEvent) GetAt() *timestamp.Timestamp {
	if m != nil {
		return m.At
	}
	return nil
}

func (m *PositionEvent) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *PositionEvent) GetElevation() int32 {
	if m != nil {
		return m.Elevation
	}
	return 0
}

func (m *PositionEvent) GetFlightId() int32 {
	if m != nil {
		return m.FlightId
	}
	return 0
}

type HotSpotEvent struct {
	MissionId            int32     `protobuf:"varint,1,opt,name=mission_id,json=missionId,proto3" json:"mission_id,omitempty"`
	Id                   int64     `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Location             *Location `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	Delta                float32   `protobuf:"fixed32,4,opt,name=delta,proto3" json:"delta,omitempty"`
	FlightId             int32     `protobuf:"varint,5,opt,name=flight_id,json=flightId,proto3" json:"flight_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *HotSpotEvent) Reset()         { *m = HotSpotEvent{} }
func (m *HotSpotEvent) String() string { return proto.CompactTextString(m) }
func (*HotSpotEvent) ProtoMessage()    {}
func (*HotSpotEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cea3ef5dc9ae365, []int{10}
}

func (m *HotSpotEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HotSpotEvent.Unmarshal(m, b)
}
func (m *HotSpotEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HotSpotEvent.Marshal(b, m, deterministic)
}
func (m *HotSpotEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HotSpotEvent.Merge(m, src)
}
func (m *HotSpotEvent) XXX_Size() int {
	return xxx_messageInfo_HotSpotEvent.Size(m)
}
func (m *HotSpotEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_HotSpotEvent.DiscardUnknown(m)
}

var xxx_messageInfo_HotSpotEvent proto.InternalMessageInfo

func (m *HotSpotEvent) GetMissionId() int32 {
	if m != nil {
		return m.MissionId
	}
	return 0
}

func (m *HotSpotEvent) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *HotSpotEvent) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *HotSpotEvent) GetDelta() float32 {
	if m != nil {
		return m.Delta
	}
	return 0
}

func (m *HotSpotEvent) GetFlightId() int32 {
	if m != nil {
		return m.FlightId
	}
	return 0
}

type StatusReply struct {
	Status               StatusReply_Status `protobuf:"varint,1,opt,name=status,proto3,enum=StatusReply_Status" json:"status,omitempty"`
	Message              string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *StatusReply) Reset()         { *m = StatusReply{} }
func (m *StatusReply) String() string { return proto.CompactTextString(m) }
func (*StatusReply) ProtoMessage()    {}
func (*StatusReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cea3ef5dc9ae365, []int{11}
}

func (m *StatusReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusReply.Unmarshal(m, b)
}
func (m *StatusReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusReply.Marshal(b, m, deterministic)
}
func (m *StatusReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusReply.Merge(m, src)
}
func (m *StatusReply) XXX_Size() int {
	return xxx_messageInfo_StatusReply.Size(m)
}
func (m *StatusReply) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusReply.DiscardUnknown(m)
}

var xxx_messageInfo_StatusReply proto.InternalMessageInfo

func (m *StatusReply) GetStatus() StatusReply_Status {
	if m != nil {
		return m.Status
	}
	return StatusReply_OK
}

func (m *StatusReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ChatMessageRequest struct {
	MissionId            int32                `protobuf:"varint,1,opt,name=mission_id,json=missionId,proto3" json:"mission_id,omitempty"`
	Message              string               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	At                   *timestamp.Timestamp `protobuf:"bytes,3,opt,name=at,proto3" json:"at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ChatMessageRequest) Reset()         { *m = ChatMessageRequest{} }
func (m *ChatMessageRequest) String() string { return proto.CompactTextString(m) }
func (*ChatMessageRequest) ProtoMessage()    {}
func (*ChatMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cea3ef5dc9ae365, []int{12}
}

func (m *ChatMessageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChatMessageRequest.Unmarshal(m, b)
}
func (m *ChatMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChatMessageRequest.Marshal(b, m, deterministic)
}
func (m *ChatMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatMessageRequest.Merge(m, src)
}
func (m *ChatMessageRequest) XXX_Size() int {
	return xxx_messageInfo_ChatMessageRequest.Size(m)
}
func (m *ChatMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChatMessageRequest proto.InternalMessageInfo

func (m *ChatMessageRequest) GetMissionId() int32 {
	if m != nil {
		return m.MissionId
	}
	return 0
}

func (m *ChatMessageRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ChatMessageRequest) GetAt() *timestamp.Timestamp {
	if m != nil {
		return m.At
	}
	return nil
}

type MissionEvent struct {
	MissionId            int32     `protobuf:"varint,1,opt,name=mission_id,json=missionId,proto3" json:"mission_id,omitempty"`
	EventType            EventType `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3,enum=EventType" json:"event_type,omitempty"`
	Payload              *any.Any  `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *MissionEvent) Reset()         { *m = MissionEvent{} }
func (m *MissionEvent) String() string { return proto.CompactTextString(m) }
func (*MissionEvent) ProtoMessage()    {}
func (*MissionEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cea3ef5dc9ae365, []int{13}
}

func (m *MissionEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MissionEvent.Unmarshal(m, b)
}
func (m *MissionEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MissionEvent.Marshal(b, m, deterministic)
}
func (m *MissionEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MissionEvent.Merge(m, src)
}
func (m *MissionEvent) XXX_Size() int {
	return xxx_messageInfo_MissionEvent.Size(m)
}
func (m *MissionEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MissionEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MissionEvent proto.InternalMessageInfo

func (m *MissionEvent) GetMissionId() int32 {
	if m != nil {
		return m.MissionId
	}
	return 0
}

func (m *MissionEvent) GetEventType() EventType {
	if m != nil {
		return m.EventType
	}
	return EventType_EVT_UNKNOWN
}

func (m *MissionEvent) GetPayload() *any.Any {
	if m != nil {
		return m.Payload
	}
	return nil
}

type MissionRequest struct {
	MissionId            int32    `protobuf:"varint,1,opt,name=mission_id,json=missionId,proto3" json:"mission_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MissionRequest) Reset()         { *m = MissionRequest{} }
func (m *MissionRequest) String() string { return proto.CompactTextString(m) }
func (*MissionRequest) ProtoMessage()    {}
func (*MissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cea3ef5dc9ae365, []int{14}
}

func (m *MissionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MissionRequest.Unmarshal(m, b)
}
func (m *MissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MissionRequest.Marshal(b, m, deterministic)
}
func (m *MissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MissionRequest.Merge(m, src)
}
func (m *MissionRequest) XXX_Size() int {
	return xxx_messageInfo_MissionRequest.Size(m)
}
func (m *MissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MissionRequest proto.InternalMessageInfo

func (m *MissionRequest) GetMissionId() int32 {
	if m != nil {
		return m.MissionId
	}
	return 0
}

func init() {
	proto.RegisterEnum("EventType", EventType_name, EventType_value)
	proto.RegisterEnum("StatusReply_Status", StatusReply_Status_name, StatusReply_Status_value)
	proto.RegisterType((*ProjectRequest)(nil), "ProjectRequest")
	proto.RegisterType((*ProjectReply)(nil), "ProjectReply")
	proto.RegisterType((*PingRequest)(nil), "PingRequest")
	proto.RegisterType((*PingReply)(nil), "PingReply")
	proto.RegisterType((*SendPositionReply)(nil), "SendPositionReply")
	proto.RegisterType((*SendHotspotReply)(nil), "SendHotspotReply")
	proto.RegisterType((*FileUpload)(nil), "FileUpload")
	proto.RegisterType((*FileReply)(nil), "FileReply")
	proto.RegisterType((*Location)(nil), "Location")
	proto.RegisterType((*PositionEvent)(nil), "PositionEvent")
	proto.RegisterType((*HotSpotEvent)(nil), "HotSpotEvent")
	proto.RegisterType((*StatusReply)(nil), "StatusReply")
	proto.RegisterType((*ChatMessageRequest)(nil), "ChatMessageRequest")
	proto.RegisterType((*MissionEvent)(nil), "MissionEvent")
	proto.RegisterType((*MissionRequest)(nil), "MissionRequest")
}

func init() {
	proto.RegisterFile("pb/rpc.proto", fileDescriptor_3cea3ef5dc9ae365)
}

var fileDescriptor_3cea3ef5dc9ae365 = []byte{
	// 825 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xe1, 0x6e, 0xdb, 0x36,
	0x10, 0xb6, 0x64, 0x27, 0xb1, 0xce, 0x8a, 0xac, 0x32, 0xc1, 0xe0, 0x29, 0x1b, 0x16, 0xb0, 0x18,
	0xe0, 0x75, 0x00, 0x3d, 0xb8, 0x43, 0x81, 0xfe, 0xec, 0x0c, 0x2f, 0x35, 0xba, 0xc8, 0x06, 0xe5,
	0x6e, 0xc0, 0xfe, 0x18, 0x4a, 0xc4, 0xba, 0x5a, 0x65, 0x51, 0x8d, 0x98, 0x02, 0xea, 0x9f, 0xfd,
	0xdd, 0x1b, 0xec, 0x65, 0xf6, 0x06, 0x7b, 0x91, 0x3d, 0xc6, 0x40, 0x52, 0xd2, 0xe4, 0xc4, 0x6b,
	0xfc, 0x8f, 0xbc, 0xfb, 0x8e, 0xf7, 0xdd, 0x1d, 0xef, 0x0e, 0xec, 0xec, 0x6a, 0x74, 0x93, 0x5d,
	0x93, 0xec, 0x86, 0x0b, 0xee, 0x7d, 0xb5, 0xe6, 0x7c, 0x9d, 0xb0, 0x91, 0xba, 0x5d, 0xdd, 0xbe,
	0x19, 0x89, 0x78, 0xc3, 0x72, 0x11, 0x6e, 0xb2, 0x12, 0xf0, 0xf9, 0x5d, 0x40, 0x98, 0x16, 0x5a,
	0x85, 0x27, 0xe0, 0x2c, 0x6e, 0xf8, 0x6f, 0xec, 0x5a, 0x50, 0xf6, 0xfe, 0x96, 0xe5, 0x02, 0x7d,
	0x09, 0xb0, 0x89, 0xf3, 0x3c, 0xe6, 0xe9, 0x2a, 0x8e, 0x06, 0xc6, 0xb9, 0x31, 0x3c, 0xa0, 0x56,
	0x29, 0x99, 0x45, 0x08, 0x41, 0x27, 0x0d, 0x37, 0x6c, 0x60, 0x9e, 0x1b, 0x43, 0x8b, 0xaa, 0x33,
	0xbe, 0x00, 0xbb, 0x7e, 0x24, 0x4b, 0x8a, 0x87, 0x9e, 0x18, 0xc0, 0xd1, 0x86, 0xe5, 0x79, 0xb8,
	0xae, 0x5e, 0xa9, 0xae, 0xf8, 0x39, 0xf4, 0x16, 0x71, 0xba, 0xae, 0xa8, 0x3c, 0x01, 0x33, 0x14,
	0xca, 0xbe, 0x37, 0xf6, 0x88, 0x0e, 0x82, 0x54, 0x41, 0x90, 0x65, 0x15, 0x25, 0x35, 0x43, 0x81,
	0xcf, 0xc0, 0xd2, 0xa6, 0x92, 0x80, 0x03, 0x26, 0x7f, 0xa7, 0x0c, 0xbb, 0xd4, 0xe4, 0xef, 0xf0,
	0x63, 0x78, 0x14, 0xb0, 0x34, 0x5a, 0xf0, 0x3c, 0x16, 0x31, 0x4f, 0x77, 0x83, 0x30, 0xb8, 0x12,
	0xf4, 0x92, 0x8b, 0x3c, 0xe3, 0x62, 0x37, 0xa6, 0x00, 0xf8, 0x31, 0x4e, 0xd8, 0xeb, 0x2c, 0xe1,
	0x61, 0xf4, 0x50, 0x9c, 0x67, 0x60, 0xbd, 0x89, 0x13, 0xb6, 0x6a, 0xe4, 0xab, 0x2b, 0x05, 0x7e,
	0xb8, 0x61, 0xb5, 0x32, 0x8f, 0x3f, 0xb2, 0x41, 0xfb, 0xdc, 0x18, 0xb6, 0xb5, 0x32, 0x88, 0x3f,
	0x32, 0x99, 0xe4, 0x28, 0x14, 0xe1, 0xa0, 0x73, 0x6e, 0x0c, 0x6d, 0xaa, 0xce, 0xf8, 0x31, 0x58,
	0xd2, 0xb5, 0xe6, 0xf5, 0x19, 0x1c, 0xe6, 0x22, 0x14, 0xb7, 0x79, 0xe9, 0xb5, 0xbc, 0x61, 0x02,
	0xdd, 0x9f, 0xf8, 0x75, 0x28, 0x83, 0x44, 0x2e, 0xb4, 0x93, 0x32, 0x7d, 0x06, 0x95, 0x47, 0x25,
	0xe1, 0xa9, 0xa2, 0x22, 0x25, 0x3c, 0xc5, 0x7f, 0x19, 0x70, 0x5c, 0x65, 0x65, 0xfa, 0x81, 0xa5,
	0x0f, 0x96, 0x5f, 0x97, 0xc4, 0xdc, 0xa7, 0x24, 0xe8, 0x6b, 0xe8, 0x26, 0x25, 0x19, 0x15, 0x61,
	0x6f, 0x6c, 0x91, 0x8a, 0x1d, 0xad, 0x55, 0xe8, 0x0b, 0xb0, 0x58, 0xc2, 0x3e, 0x68, 0x5c, 0x47,
	0x3b, 0xac, 0x05, 0x2a, 0x4f, 0x49, 0xbc, 0x7e, 0x2b, 0x24, 0x9d, 0x03, 0xa5, 0xed, 0x6a, 0xc1,
	0x2c, 0xc2, 0x7f, 0x1a, 0x60, 0xbf, 0xe4, 0x22, 0xc8, 0xb8, 0xd8, 0x8b, 0xbd, 0x03, 0x66, 0x1c,
	0x29, 0xf6, 0x6d, 0x6a, 0xc6, 0xd1, 0xbe, 0x0c, 0x4f, 0xe1, 0x20, 0x62, 0x49, 0x59, 0x0f, 0x93,
	0xea, 0xcb, 0xa7, 0x99, 0xbd, 0x87, 0x5e, 0xa0, 0x4a, 0xa2, 0xeb, 0xf5, 0xed, 0x56, 0xbd, 0x9c,
	0xf1, 0x09, 0x69, 0x68, 0xab, 0x73, 0x09, 0xf9, 0x44, 0x7f, 0x9c, 0xc1, 0xa1, 0xc6, 0xa2, 0x43,
	0x30, 0xe7, 0xaf, 0xdc, 0x16, 0xb2, 0xe0, 0x60, 0x4a, 0xe9, 0x9c, 0xba, 0x06, 0x2e, 0x00, 0x4d,
	0xde, 0x86, 0xe2, 0x52, 0x63, 0xf7, 0x6c, 0xe7, 0xff, 0xf5, 0x55, 0x56, 0xba, 0xbd, 0x57, 0xf3,
	0xfd, 0x61, 0x80, 0x7d, 0xa9, 0xdf, 0xdc, 0xab, 0x0e, 0xdf, 0x00, 0x30, 0x89, 0x5b, 0x89, 0x22,
	0xd3, 0x8e, 0x9d, 0x31, 0x10, 0x65, 0xba, 0x2c, 0x32, 0x46, 0x2d, 0x56, 0x1d, 0x11, 0x81, 0xa3,
	0x2c, 0x2c, 0x64, 0xbb, 0x95, 0x5c, 0x4e, 0xef, 0x71, 0x79, 0x91, 0x16, 0xb4, 0x02, 0xe1, 0x11,
	0x38, 0x25, 0x93, 0xfd, 0x32, 0xf0, 0xe4, 0x77, 0xb0, 0x6a, 0xc7, 0xa8, 0x0f, 0xbd, 0xe9, 0xcf,
	0xcb, 0xd5, 0x6b, 0xff, 0x95, 0x3f, 0xff, 0xc5, 0x77, 0x5b, 0x95, 0x60, 0x32, 0xf7, 0xfd, 0xe9,
	0x64, 0xe9, 0x1a, 0xc8, 0x86, 0xae, 0x14, 0x2c, 0x66, 0xfe, 0x85, 0x6b, 0xd6, 0xb7, 0xb9, 0x7f,
	0xe1, 0xb6, 0x2b, 0xf0, 0xe5, 0x34, 0x08, 0x5e, 0x5c, 0x4c, 0x5d, 0x40, 0x27, 0xd0, 0x97, 0x82,
	0x60, 0xba, 0x5c, 0x5d, 0xce, 0x82, 0x60, 0x36, 0xf7, 0xdd, 0x53, 0xe4, 0x80, 0x25, 0x85, 0xba,
	0x6c, 0xff, 0x1c, 0x8d, 0xff, 0x6e, 0x43, 0x9b, 0x2e, 0x26, 0xe8, 0x39, 0x9c, 0x04, 0xe2, 0x86,
	0x85, 0x9b, 0x66, 0x26, 0x73, 0xd4, 0x27, 0xdb, 0xf1, 0x78, 0xc7, 0xa4, 0x09, 0xc0, 0xad, 0xef,
	0x0c, 0xf4, 0x0c, 0xfa, 0xda, 0xb4, 0xea, 0xe5, 0x1d, 0x66, 0x0e, 0xd9, 0x6a, 0x74, 0x65, 0xf7,
	0x3d, 0x38, 0xda, 0xae, 0x6c, 0xa2, 0x9d, 0xde, 0x9a, 0x0d, 0xa6, 0xac, 0xc6, 0xd0, 0x93, 0x83,
	0xb2, 0xfc, 0x68, 0xe8, 0x84, 0xdc, 0xff, 0x76, 0x9e, 0xdd, 0xfc, 0xe0, 0xb8, 0x25, 0x3b, 0x4d,
	0xda, 0xc8, 0x09, 0x86, 0x7a, 0xe4, 0xbf, 0x19, 0xea, 0x01, 0xa9, 0xa7, 0x1a, 0x6e, 0xa1, 0x67,
	0x60, 0x37, 0x07, 0x35, 0xba, 0x43, 0xda, 0x43, 0xe4, 0xde, 0x1c, 0xc7, 0xad, 0xa1, 0x81, 0x9e,
	0x6a, 0x4a, 0xe5, 0xec, 0x46, 0xdb, 0xa4, 0xbd, 0x47, 0xe4, 0xee, 0x60, 0x57, 0x46, 0x18, 0x3a,
	0x72, 0x65, 0x20, 0x9b, 0x34, 0x96, 0x8e, 0x07, 0xa4, 0xde, 0x23, 0xb8, 0x85, 0x46, 0xd0, 0x9b,
	0x67, 0x2c, 0x2d, 0xd7, 0x1b, 0xea, 0x93, 0xed, 0x6d, 0xe9, 0x1d, 0x93, 0xe6, 0xe6, 0xc3, 0xad,
	0x1f, 0x3a, 0xbf, 0x9a, 0xd9, 0xd5, 0xd5, 0xa1, 0xfa, 0x9c, 0x4f, 0xff, 0x0d, 0x00, 0x00, 0xff,
	0xff, 0xc2, 0x9a, 0x51, 0x0a, 0xa9, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RPCClient is the client API for RPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCClient interface {
	StreamMissionEvents(ctx context.Context, in *MissionRequest, opts ...grpc.CallOption) (RPC_StreamMissionEventsClient, error)
	StreamPositions(ctx context.Context, in *MissionRequest, opts ...grpc.CallOption) (RPC_StreamPositionsClient, error)
	StreamHotSpots(ctx context.Context, in *MissionRequest, opts ...grpc.CallOption) (RPC_StreamHotSpotsClient, error)
	SendMessage(ctx context.Context, in *ChatMessageRequest, opts ...grpc.CallOption) (*StatusReply, error)
	SendFile(ctx context.Context, in *FileUpload, opts ...grpc.CallOption) (*FileReply, error)
	SendPosition(ctx context.Context, opts ...grpc.CallOption) (RPC_SendPositionClient, error)
	SendHotspot(ctx context.Context, opts ...grpc.CallOption) (RPC_SendHotspotClient, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	OpenProject(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*ProjectReply, error)
}

type rPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCClient(cc grpc.ClientConnInterface) RPCClient {
	return &rPCClient{cc}
}

func (c *rPCClient) StreamMissionEvents(ctx context.Context, in *MissionRequest, opts ...grpc.CallOption) (RPC_StreamMissionEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RPC_serviceDesc.Streams[0], "/RPC/StreamMissionEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCStreamMissionEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RPC_StreamMissionEventsClient interface {
	Recv() (*MissionEvent, error)
	grpc.ClientStream
}

type rPCStreamMissionEventsClient struct {
	grpc.ClientStream
}

func (x *rPCStreamMissionEventsClient) Recv() (*MissionEvent, error) {
	m := new(MissionEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rPCClient) StreamPositions(ctx context.Context, in *MissionRequest, opts ...grpc.CallOption) (RPC_StreamPositionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RPC_serviceDesc.Streams[1], "/RPC/StreamPositions", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCStreamPositionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RPC_StreamPositionsClient interface {
	Recv() (*PositionEvent, error)
	grpc.ClientStream
}

type rPCStreamPositionsClient struct {
	grpc.ClientStream
}

func (x *rPCStreamPositionsClient) Recv() (*PositionEvent, error) {
	m := new(PositionEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rPCClient) StreamHotSpots(ctx context.Context, in *MissionRequest, opts ...grpc.CallOption) (RPC_StreamHotSpotsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RPC_serviceDesc.Streams[2], "/RPC/StreamHotSpots", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCStreamHotSpotsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RPC_StreamHotSpotsClient interface {
	Recv() (*HotSpotEvent, error)
	grpc.ClientStream
}

type rPCStreamHotSpotsClient struct {
	grpc.ClientStream
}

func (x *rPCStreamHotSpotsClient) Recv() (*HotSpotEvent, error) {
	m := new(HotSpotEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rPCClient) SendMessage(ctx context.Context, in *ChatMessageRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/RPC/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) SendFile(ctx context.Context, in *FileUpload, opts ...grpc.CallOption) (*FileReply, error) {
	out := new(FileReply)
	err := c.cc.Invoke(ctx, "/RPC/SendFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) SendPosition(ctx context.Context, opts ...grpc.CallOption) (RPC_SendPositionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RPC_serviceDesc.Streams[3], "/RPC/SendPosition", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCSendPositionClient{stream}
	return x, nil
}

type RPC_SendPositionClient interface {
	Send(*PositionEvent) error
	CloseAndRecv() (*SendPositionReply, error)
	grpc.ClientStream
}

type rPCSendPositionClient struct {
	grpc.ClientStream
}

func (x *rPCSendPositionClient) Send(m *PositionEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rPCSendPositionClient) CloseAndRecv() (*SendPositionReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendPositionReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rPCClient) SendHotspot(ctx context.Context, opts ...grpc.CallOption) (RPC_SendHotspotClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RPC_serviceDesc.Streams[4], "/RPC/SendHotspot", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCSendHotspotClient{stream}
	return x, nil
}

type RPC_SendHotspotClient interface {
	Send(*HotSpotEvent) error
	CloseAndRecv() (*SendHotspotReply, error)
	grpc.ClientStream
}

type rPCSendHotspotClient struct {
	grpc.ClientStream
}

func (x *rPCSendHotspotClient) Send(m *HotSpotEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rPCSendHotspotClient) CloseAndRecv() (*SendHotspotReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendHotspotReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rPCClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/RPC/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) OpenProject(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*ProjectReply, error) {
	out := new(ProjectReply)
	err := c.cc.Invoke(ctx, "/RPC/OpenProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCServer is the server API for RPC service.
type RPCServer interface {
	StreamMissionEvents(*MissionRequest, RPC_StreamMissionEventsServer) error
	StreamPositions(*MissionRequest, RPC_StreamPositionsServer) error
	StreamHotSpots(*MissionRequest, RPC_StreamHotSpotsServer) error
	SendMessage(context.Context, *ChatMessageRequest) (*StatusReply, error)
	SendFile(context.Context, *FileUpload) (*FileReply, error)
	SendPosition(RPC_SendPositionServer) error
	SendHotspot(RPC_SendHotspotServer) error
	Ping(context.Context, *PingRequest) (*PingReply, error)
	OpenProject(context.Context, *ProjectRequest) (*ProjectReply, error)
}

// UnimplementedRPCServer can be embedded to have forward compatible implementations.
type UnimplementedRPCServer struct {
}

func (*UnimplementedRPCServer) StreamMissionEvents(req *MissionRequest, srv RPC_StreamMissionEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMissionEvents not implemented")
}
func (*UnimplementedRPCServer) StreamPositions(req *MissionRequest, srv RPC_StreamPositionsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPositions not implemented")
}
func (*UnimplementedRPCServer) StreamHotSpots(req *MissionRequest, srv RPC_StreamHotSpotsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamHotSpots not implemented")
}
func (*UnimplementedRPCServer) SendMessage(ctx context.Context, req *ChatMessageRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (*UnimplementedRPCServer) SendFile(ctx context.Context, req *FileUpload) (*FileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFile not implemented")
}
func (*UnimplementedRPCServer) SendPosition(srv RPC_SendPositionServer) error {
	return status.Errorf(codes.Unimplemented, "method SendPosition not implemented")
}
func (*UnimplementedRPCServer) SendHotspot(srv RPC_SendHotspotServer) error {
	return status.Errorf(codes.Unimplemented, "method SendHotspot not implemented")
}
func (*UnimplementedRPCServer) Ping(ctx context.Context, req *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedRPCServer) OpenProject(ctx context.Context, req *ProjectRequest) (*ProjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenProject not implemented")
}

func RegisterRPCServer(s *grpc.Server, srv RPCServer) {
	s.RegisterService(&_RPC_serviceDesc, srv)
}

func _RPC_StreamMissionEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MissionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RPCServer).StreamMissionEvents(m, &rPCStreamMissionEventsServer{stream})
}

type RPC_StreamMissionEventsServer interface {
	Send(*MissionEvent) error
	grpc.ServerStream
}

type rPCStreamMissionEventsServer struct {
	grpc.ServerStream
}

func (x *rPCStreamMissionEventsServer) Send(m *MissionEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _RPC_StreamPositions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MissionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RPCServer).StreamPositions(m, &rPCStreamPositionsServer{stream})
}

type RPC_StreamPositionsServer interface {
	Send(*PositionEvent) error
	grpc.ServerStream
}

type rPCStreamPositionsServer struct {
	grpc.ServerStream
}

func (x *rPCStreamPositionsServer) Send(m *PositionEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _RPC_StreamHotSpots_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MissionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RPCServer).StreamHotSpots(m, &rPCStreamHotSpotsServer{stream})
}

type RPC_StreamHotSpotsServer interface {
	Send(*HotSpotEvent) error
	grpc.ServerStream
}

type rPCStreamHotSpotsServer struct {
	grpc.ServerStream
}

func (x *rPCStreamHotSpotsServer) Send(m *HotSpotEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _RPC_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPC/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).SendMessage(ctx, req.(*ChatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_SendFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUpload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).SendFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPC/SendFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).SendFile(ctx, req.(*FileUpload))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_SendPosition_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RPCServer).SendPosition(&rPCSendPositionServer{stream})
}

type RPC_SendPositionServer interface {
	SendAndClose(*SendPositionReply) error
	Recv() (*PositionEvent, error)
	grpc.ServerStream
}

type rPCSendPositionServer struct {
	grpc.ServerStream
}

func (x *rPCSendPositionServer) SendAndClose(m *SendPositionReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rPCSendPositionServer) Recv() (*PositionEvent, error) {
	m := new(PositionEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RPC_SendHotspot_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RPCServer).SendHotspot(&rPCSendHotspotServer{stream})
}

type RPC_SendHotspotServer interface {
	SendAndClose(*SendHotspotReply) error
	Recv() (*HotSpotEvent, error)
	grpc.ServerStream
}

type rPCSendHotspotServer struct {
	grpc.ServerStream
}

func (x *rPCSendHotspotServer) SendAndClose(m *SendHotspotReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rPCSendHotspotServer) Recv() (*HotSpotEvent, error) {
	m := new(HotSpotEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RPC_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPC/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_OpenProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).OpenProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPC/OpenProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).OpenProject(ctx, req.(*ProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RPC",
	HandlerType: (*RPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _RPC_SendMessage_Handler,
		},
		{
			MethodName: "SendFile",
			Handler:    _RPC_SendFile_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _RPC_Ping_Handler,
		},
		{
			MethodName: "OpenProject",
			Handler:    _RPC_OpenProject_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMissionEvents",
			Handler:       _RPC_StreamMissionEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamPositions",
			Handler:       _RPC_StreamPositions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamHotSpots",
			Handler:       _RPC_StreamHotSpots_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendPosition",
			Handler:       _RPC_SendPosition_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendHotspot",
			Handler:       _RPC_SendHotspot_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pb/rpc.proto",
}
