// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.7.0
// source: pb/rpc.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EventType int32

const (
	EventType_EVT_UNKNOWN     EventType = 0
	EventType_EVT_CONNECT     EventType = 1
	EventType_EVT_PING        EventType = 2
	EventType_EVT_PONG        EventType = 3
	EventType_EVT_MESSAGE     EventType = 10
	EventType_EVT_SET_MISSION EventType = 20
	EventType_EVT_ERROR       EventType = 1000
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0:    "EVT_UNKNOWN",
		1:    "EVT_CONNECT",
		2:    "EVT_PING",
		3:    "EVT_PONG",
		10:   "EVT_MESSAGE",
		20:   "EVT_SET_MISSION",
		1000: "EVT_ERROR",
	}
	EventType_value = map[string]int32{
		"EVT_UNKNOWN":     0,
		"EVT_CONNECT":     1,
		"EVT_PING":        2,
		"EVT_PONG":        3,
		"EVT_MESSAGE":     10,
		"EVT_SET_MISSION": 20,
		"EVT_ERROR":       1000,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_rpc_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_pb_rpc_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_pb_rpc_proto_rawDescGZIP(), []int{0}
}

type StatusReply_Status int32

const (
	StatusReply_OK    StatusReply_Status = 0
	StatusReply_ERROR StatusReply_Status = 1
)

// Enum value maps for StatusReply_Status.
var (
	StatusReply_Status_name = map[int32]string{
		0: "OK",
		1: "ERROR",
	}
	StatusReply_Status_value = map[string]int32{
		"OK":    0,
		"ERROR": 1,
	}
)

func (x StatusReply_Status) Enum() *StatusReply_Status {
	p := new(StatusReply_Status)
	*p = x
	return p
}

func (x StatusReply_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusReply_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_rpc_proto_enumTypes[1].Descriptor()
}

func (StatusReply_Status) Type() protoreflect.EnumType {
	return &file_pb_rpc_proto_enumTypes[1]
}

func (x StatusReply_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusReply_Status.Descriptor instead.
func (StatusReply_Status) EnumDescriptor() ([]byte, []int) {
	return file_pb_rpc_proto_rawDescGZIP(), []int{9, 0}
}

type CreateFlightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CreateFlightRequest) Reset() {
	*x = CreateFlightRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlightRequest) ProtoMessage() {}

func (x *CreateFlightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlightRequest.ProtoReflect.Descriptor instead.
func (*CreateFlightRequest) Descriptor() ([]byte, []int) {
	return file_pb_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *CreateFlightRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type CreateFlightResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlightId int32 `protobuf:"varint,1,opt,name=flight_id,json=flightId,proto3" json:"flight_id,omitempty"`
}

func (x *CreateFlightResponse) Reset() {
	*x = CreateFlightResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlightResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlightResponse) ProtoMessage() {}

func (x *CreateFlightResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlightResponse.ProtoReflect.Descriptor instead.
func (*CreateFlightResponse) Descriptor() ([]byte, []int) {
	return file_pb_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *CreateFlightResponse) GetFlightId() int32 {
	if x != nil {
		return x.FlightId
	}
	return 0
}

type MissionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissionId int32  `protobuf:"varint,1,opt,name=mission_id,json=missionId,proto3" json:"mission_id,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *MissionReply) Reset() {
	*x = MissionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionReply) ProtoMessage() {}

func (x *MissionReply) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionReply.ProtoReflect.Descriptor instead.
func (*MissionReply) Descriptor() ([]byte, []int) {
	return file_pb_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *MissionReply) GetMissionId() int32 {
	if x != nil {
		return x.MissionId
	}
	return 0
}

func (x *MissionReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MissionReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	At *timestamp.Timestamp `protobuf:"bytes,1,opt,name=at,proto3" json:"at,omitempty"`
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_pb_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *PingRequest) GetAt() *timestamp.Timestamp {
	if x != nil {
		return x.At
	}
	return nil
}

type FileUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileSize int64  `protobuf:"varint,2,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	Data     []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FileUpload) Reset() {
	*x = FileUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUpload) ProtoMessage() {}

func (x *FileUpload) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUpload.ProtoReflect.Descriptor instead.
func (*FileUpload) Descriptor() ([]byte, []int) {
	return file_pb_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *FileUpload) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileUpload) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *FileUpload) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type FileReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *FileReply) Reset() {
	*x = FileReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileReply) ProtoMessage() {}

func (x *FileReply) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileReply.ProtoReflect.Descriptor instead.
func (*FileReply) Descriptor() ([]byte, []int) {
	return file_pb_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *FileReply) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lat float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon float64 `protobuf:"fixed64,2,opt,name=lon,proto3" json:"lon,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_pb_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *Location) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Location) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

type PositionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	At        *timestamp.Timestamp `protobuf:"bytes,1,opt,name=at,proto3" json:"at,omitempty"`
	Id        int32                `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Location  *Location            `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	Elevation int32                `protobuf:"varint,4,opt,name=elevation,proto3" json:"elevation,omitempty"`
	FlightId  int32                `protobuf:"varint,5,opt,name=flight_id,json=flightId,proto3" json:"flight_id,omitempty"`
}

func (x *PositionEvent) Reset() {
	*x = PositionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionEvent) ProtoMessage() {}

func (x *PositionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionEvent.ProtoReflect.Descriptor instead.
func (*PositionEvent) Descriptor() ([]byte, []int) {
	return file_pb_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *PositionEvent) GetAt() *timestamp.Timestamp {
	if x != nil {
		return x.At
	}
	return nil
}

func (x *PositionEvent) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PositionEvent) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *PositionEvent) GetElevation() int32 {
	if x != nil {
		return x.Elevation
	}
	return 0
}

func (x *PositionEvent) GetFlightId() int32 {
	if x != nil {
		return x.FlightId
	}
	return 0
}

type HotSpotEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	At       *timestamp.Timestamp `protobuf:"bytes,1,opt,name=at,proto3" json:"at,omitempty"`
	Id       int32                `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Location *Location            `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	Delta    int32                `protobuf:"varint,4,opt,name=delta,proto3" json:"delta,omitempty"`
	FlightId int32                `protobuf:"varint,5,opt,name=flight_id,json=flightId,proto3" json:"flight_id,omitempty"`
}

func (x *HotSpotEvent) Reset() {
	*x = HotSpotEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HotSpotEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HotSpotEvent) ProtoMessage() {}

func (x *HotSpotEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HotSpotEvent.ProtoReflect.Descriptor instead.
func (*HotSpotEvent) Descriptor() ([]byte, []int) {
	return file_pb_rpc_proto_rawDescGZIP(), []int{8}
}

func (x *HotSpotEvent) GetAt() *timestamp.Timestamp {
	if x != nil {
		return x.At
	}
	return nil
}

func (x *HotSpotEvent) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HotSpotEvent) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *HotSpotEvent) GetDelta() int32 {
	if x != nil {
		return x.Delta
	}
	return 0
}

func (x *HotSpotEvent) GetFlightId() int32 {
	if x != nil {
		return x.FlightId
	}
	return 0
}

type StatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  StatusReply_Status `protobuf:"varint,1,opt,name=status,proto3,enum=StatusReply_Status" json:"status,omitempty"`
	Message string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StatusReply) Reset() {
	*x = StatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusReply) ProtoMessage() {}

func (x *StatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusReply.ProtoReflect.Descriptor instead.
func (*StatusReply) Descriptor() ([]byte, []int) {
	return file_pb_rpc_proto_rawDescGZIP(), []int{9}
}

func (x *StatusReply) GetStatus() StatusReply_Status {
	if x != nil {
		return x.Status
	}
	return StatusReply_OK
}

func (x *StatusReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ChatMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message  string               `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	At       *timestamp.Timestamp `protobuf:"bytes,2,opt,name=at,proto3" json:"at,omitempty"`
	StartIdx int32                `protobuf:"varint,3,opt,name=start_idx,json=startIdx,proto3" json:"start_idx,omitempty"`
}

func (x *ChatMessageRequest) Reset() {
	*x = ChatMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessageRequest) ProtoMessage() {}

func (x *ChatMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessageRequest.ProtoReflect.Descriptor instead.
func (*ChatMessageRequest) Descriptor() ([]byte, []int) {
	return file_pb_rpc_proto_rawDescGZIP(), []int{10}
}

func (x *ChatMessageRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ChatMessageRequest) GetAt() *timestamp.Timestamp {
	if x != nil {
		return x.At
	}
	return nil
}

func (x *ChatMessageRequest) GetStartIdx() int32 {
	if x != nil {
		return x.StartIdx
	}
	return 0
}

type MissionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType EventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=EventType" json:"event_type,omitempty"`
	Payload   *any.Any  `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *MissionEvent) Reset() {
	*x = MissionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionEvent) ProtoMessage() {}

func (x *MissionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionEvent.ProtoReflect.Descriptor instead.
func (*MissionEvent) Descriptor() ([]byte, []int) {
	return file_pb_rpc_proto_rawDescGZIP(), []int{11}
}

func (x *MissionEvent) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_EVT_UNKNOWN
}

func (x *MissionEvent) GetPayload() *any.Any {
	if x != nil {
		return x.Payload
	}
	return nil
}

type MissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissionId int32 `protobuf:"varint,1,opt,name=mission_id,json=missionId,proto3" json:"mission_id,omitempty"`
	StartIdx  int32 `protobuf:"varint,2,opt,name=start_idx,json=startIdx,proto3" json:"start_idx,omitempty"`
}

func (x *MissionRequest) Reset() {
	*x = MissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionRequest) ProtoMessage() {}

func (x *MissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionRequest.ProtoReflect.Descriptor instead.
func (*MissionRequest) Descriptor() ([]byte, []int) {
	return file_pb_rpc_proto_rawDescGZIP(), []int{12}
}

func (x *MissionRequest) GetMissionId() int32 {
	if x != nil {
		return x.MissionId
	}
	return 0
}

func (x *MissionRequest) GetStartIdx() int32 {
	if x != nil {
		return x.StartIdx
	}
	return 0
}

type CreateMissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreateMissionRequest) Reset() {
	*x = CreateMissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_rpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMissionRequest) ProtoMessage() {}

func (x *CreateMissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_rpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMissionRequest.ProtoReflect.Descriptor instead.
func (*CreateMissionRequest) Descriptor() ([]byte, []int) {
	return file_pb_rpc_proto_rawDescGZIP(), []int{13}
}

func (x *CreateMissionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_pb_rpc_proto protoreflect.FileDescriptor

var file_pb_rpc_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x37, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x33, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x0c, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x39, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x02, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x61, 0x74,
	0x22, 0x5a, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x23, 0x0a, 0x09,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x2e, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x6c, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f,
	0x6e, 0x22, 0xad, 0x01, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x02, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x61, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x25, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49,
	0x64, 0x22, 0xa4, 0x01, 0x0a, 0x0c, 0x48, 0x6f, 0x74, 0x53, 0x70, 0x6f, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x02, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x61, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x1b,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x22, 0x77, 0x0a, 0x12, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x02, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x02, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x49, 0x64, 0x78, 0x22, 0x69, 0x0a, 0x0c, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2e, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0x4c, 0x0a, 0x0e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x64, 0x78, 0x22, 0x2a, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x7f, 0x0a, 0x09, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x56, 0x54, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x56, 0x54, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x56, 0x54, 0x5f,
	0x50, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x56, 0x54, 0x5f, 0x50, 0x4f,
	0x4e, 0x47, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x56, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x56, 0x54, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x14, 0x12, 0x0e, 0x0a, 0x09, 0x45, 0x56,
	0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xe8, 0x07, 0x32, 0xb8, 0x04, 0x0a, 0x03, 0x52,
	0x50, 0x43, 0x12, 0x3f, 0x0a, 0x19, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x0f, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0d, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x3c, 0x0a, 0x15, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0f, 0x2e, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x3a, 0x0a, 0x14, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x48, 0x6f, 0x74, 0x53, 0x70, 0x6f, 0x74, 0x73, 0x12, 0x0f, 0x2e, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x48, 0x6f, 0x74,
	0x53, 0x70, 0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x39, 0x0a,
	0x15, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x0c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x28, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x48, 0x6f, 0x74, 0x73, 0x70, 0x6f, 0x74, 0x73,
	0x12, 0x0d, 0x2e, 0x48, 0x6f, 0x74, 0x53, 0x70, 0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a,
	0x0c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x28,
	0x01, 0x12, 0x25, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x0b, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x0a, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x13, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x65, 0x69, 0x67, 0x68, 0x6d, 0x61, 0x63, 0x64, 0x6f, 0x6e, 0x61,
	0x6c, 0x64, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x70, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_rpc_proto_rawDescOnce sync.Once
	file_pb_rpc_proto_rawDescData = file_pb_rpc_proto_rawDesc
)

func file_pb_rpc_proto_rawDescGZIP() []byte {
	file_pb_rpc_proto_rawDescOnce.Do(func() {
		file_pb_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_rpc_proto_rawDescData)
	})
	return file_pb_rpc_proto_rawDescData
}

var file_pb_rpc_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_pb_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_pb_rpc_proto_goTypes = []interface{}{
	(EventType)(0),               // 0: EventType
	(StatusReply_Status)(0),      // 1: StatusReply.Status
	(*CreateFlightRequest)(nil),  // 2: CreateFlightRequest
	(*CreateFlightResponse)(nil), // 3: CreateFlightResponse
	(*MissionReply)(nil),         // 4: MissionReply
	(*PingRequest)(nil),          // 5: PingRequest
	(*FileUpload)(nil),           // 6: FileUpload
	(*FileReply)(nil),            // 7: FileReply
	(*Location)(nil),             // 8: Location
	(*PositionEvent)(nil),        // 9: PositionEvent
	(*HotSpotEvent)(nil),         // 10: HotSpotEvent
	(*StatusReply)(nil),          // 11: StatusReply
	(*ChatMessageRequest)(nil),   // 12: ChatMessageRequest
	(*MissionEvent)(nil),         // 13: MissionEvent
	(*MissionRequest)(nil),       // 14: MissionRequest
	(*CreateMissionRequest)(nil), // 15: CreateMissionRequest
	(*timestamp.Timestamp)(nil),  // 16: google.protobuf.Timestamp
	(*any.Any)(nil),              // 17: google.protobuf.Any
}
var file_pb_rpc_proto_depIdxs = []int32{
	16, // 0: PingRequest.at:type_name -> google.protobuf.Timestamp
	16, // 1: PositionEvent.at:type_name -> google.protobuf.Timestamp
	8,  // 2: PositionEvent.location:type_name -> Location
	16, // 3: HotSpotEvent.at:type_name -> google.protobuf.Timestamp
	8,  // 4: HotSpotEvent.location:type_name -> Location
	1,  // 5: StatusReply.status:type_name -> StatusReply.Status
	16, // 6: ChatMessageRequest.at:type_name -> google.protobuf.Timestamp
	0,  // 7: MissionEvent.event_type:type_name -> EventType
	17, // 8: MissionEvent.payload:type_name -> google.protobuf.Any
	14, // 9: RPC.ClientStreamMissionEvents:input_type -> MissionRequest
	14, // 10: RPC.ClientStreamPositions:input_type -> MissionRequest
	14, // 11: RPC.ClientStreamHotSpots:input_type -> MissionRequest
	9,  // 12: RPC.SourceInsertPositions:input_type -> PositionEvent
	10, // 13: RPC.SourceInsertHotspots:input_type -> HotSpotEvent
	6,  // 14: RPC.SendFile:input_type -> FileUpload
	12, // 15: RPC.SendMessage:input_type -> ChatMessageRequest
	2,  // 16: RPC.CreateFlight:input_type -> CreateFlightRequest
	15, // 17: RPC.CreateMission:input_type -> CreateMissionRequest
	14, // 18: RPC.OpenMission:input_type -> MissionRequest
	13, // 19: RPC.ClientStreamMissionEvents:output_type -> MissionEvent
	9,  // 20: RPC.ClientStreamPositions:output_type -> PositionEvent
	10, // 21: RPC.ClientStreamHotSpots:output_type -> HotSpotEvent
	11, // 22: RPC.SourceInsertPositions:output_type -> StatusReply
	11, // 23: RPC.SourceInsertHotspots:output_type -> StatusReply
	7,  // 24: RPC.SendFile:output_type -> FileReply
	11, // 25: RPC.SendMessage:output_type -> StatusReply
	3,  // 26: RPC.CreateFlight:output_type -> CreateFlightResponse
	4,  // 27: RPC.CreateMission:output_type -> MissionReply
	4,  // 28: RPC.OpenMission:output_type -> MissionReply
	19, // [19:29] is the sub-list for method output_type
	9,  // [9:19] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_pb_rpc_proto_init() }
func file_pb_rpc_proto_init() {
	if File_pb_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFlightRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFlightResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HotSpotEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_rpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_rpc_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_rpc_proto_goTypes,
		DependencyIndexes: file_pb_rpc_proto_depIdxs,
		EnumInfos:         file_pb_rpc_proto_enumTypes,
		MessageInfos:      file_pb_rpc_proto_msgTypes,
	}.Build()
	File_pb_rpc_proto = out.File
	file_pb_rpc_proto_rawDesc = nil
	file_pb_rpc_proto_goTypes = nil
	file_pb_rpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RPCClient is the client API for RPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCClient interface {
	// --- Clients data stream egress
	ClientStreamMissionEvents(ctx context.Context, in *MissionRequest, opts ...grpc.CallOption) (RPC_ClientStreamMissionEventsClient, error)
	ClientStreamPositions(ctx context.Context, in *MissionRequest, opts ...grpc.CallOption) (RPC_ClientStreamPositionsClient, error)
	ClientStreamHotSpots(ctx context.Context, in *MissionRequest, opts ...grpc.CallOption) (RPC_ClientStreamHotSpotsClient, error)
	// --- Server data ingress
	SourceInsertPositions(ctx context.Context, opts ...grpc.CallOption) (RPC_SourceInsertPositionsClient, error)
	SourceInsertHotspots(ctx context.Context, opts ...grpc.CallOption) (RPC_SourceInsertHotspotsClient, error)
	// --- Commands that will work from any context
	SendFile(ctx context.Context, in *FileUpload, opts ...grpc.CallOption) (*FileReply, error)
	SendMessage(ctx context.Context, in *ChatMessageRequest, opts ...grpc.CallOption) (*StatusReply, error)
	CreateFlight(ctx context.Context, in *CreateFlightRequest, opts ...grpc.CallOption) (*CreateFlightResponse, error)
	// Create a new unique instance of a mission
	CreateMission(ctx context.Context, in *CreateMissionRequest, opts ...grpc.CallOption) (*MissionReply, error)
	// Open the mission to check for its existence or get metadata
	OpenMission(ctx context.Context, in *MissionRequest, opts ...grpc.CallOption) (*MissionReply, error)
}

type rPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCClient(cc grpc.ClientConnInterface) RPCClient {
	return &rPCClient{cc}
}

func (c *rPCClient) ClientStreamMissionEvents(ctx context.Context, in *MissionRequest, opts ...grpc.CallOption) (RPC_ClientStreamMissionEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RPC_serviceDesc.Streams[0], "/RPC/ClientStreamMissionEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCClientStreamMissionEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RPC_ClientStreamMissionEventsClient interface {
	Recv() (*MissionEvent, error)
	grpc.ClientStream
}

type rPCClientStreamMissionEventsClient struct {
	grpc.ClientStream
}

func (x *rPCClientStreamMissionEventsClient) Recv() (*MissionEvent, error) {
	m := new(MissionEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rPCClient) ClientStreamPositions(ctx context.Context, in *MissionRequest, opts ...grpc.CallOption) (RPC_ClientStreamPositionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RPC_serviceDesc.Streams[1], "/RPC/ClientStreamPositions", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCClientStreamPositionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RPC_ClientStreamPositionsClient interface {
	Recv() (*PositionEvent, error)
	grpc.ClientStream
}

type rPCClientStreamPositionsClient struct {
	grpc.ClientStream
}

func (x *rPCClientStreamPositionsClient) Recv() (*PositionEvent, error) {
	m := new(PositionEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rPCClient) ClientStreamHotSpots(ctx context.Context, in *MissionRequest, opts ...grpc.CallOption) (RPC_ClientStreamHotSpotsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RPC_serviceDesc.Streams[2], "/RPC/ClientStreamHotSpots", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCClientStreamHotSpotsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RPC_ClientStreamHotSpotsClient interface {
	Recv() (*HotSpotEvent, error)
	grpc.ClientStream
}

type rPCClientStreamHotSpotsClient struct {
	grpc.ClientStream
}

func (x *rPCClientStreamHotSpotsClient) Recv() (*HotSpotEvent, error) {
	m := new(HotSpotEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rPCClient) SourceInsertPositions(ctx context.Context, opts ...grpc.CallOption) (RPC_SourceInsertPositionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RPC_serviceDesc.Streams[3], "/RPC/SourceInsertPositions", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCSourceInsertPositionsClient{stream}
	return x, nil
}

type RPC_SourceInsertPositionsClient interface {
	Send(*PositionEvent) error
	CloseAndRecv() (*StatusReply, error)
	grpc.ClientStream
}

type rPCSourceInsertPositionsClient struct {
	grpc.ClientStream
}

func (x *rPCSourceInsertPositionsClient) Send(m *PositionEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rPCSourceInsertPositionsClient) CloseAndRecv() (*StatusReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StatusReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rPCClient) SourceInsertHotspots(ctx context.Context, opts ...grpc.CallOption) (RPC_SourceInsertHotspotsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RPC_serviceDesc.Streams[4], "/RPC/SourceInsertHotspots", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCSourceInsertHotspotsClient{stream}
	return x, nil
}

type RPC_SourceInsertHotspotsClient interface {
	Send(*HotSpotEvent) error
	CloseAndRecv() (*StatusReply, error)
	grpc.ClientStream
}

type rPCSourceInsertHotspotsClient struct {
	grpc.ClientStream
}

func (x *rPCSourceInsertHotspotsClient) Send(m *HotSpotEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rPCSourceInsertHotspotsClient) CloseAndRecv() (*StatusReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StatusReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rPCClient) SendFile(ctx context.Context, in *FileUpload, opts ...grpc.CallOption) (*FileReply, error) {
	out := new(FileReply)
	err := c.cc.Invoke(ctx, "/RPC/SendFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) SendMessage(ctx context.Context, in *ChatMessageRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/RPC/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) CreateFlight(ctx context.Context, in *CreateFlightRequest, opts ...grpc.CallOption) (*CreateFlightResponse, error) {
	out := new(CreateFlightResponse)
	err := c.cc.Invoke(ctx, "/RPC/CreateFlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) CreateMission(ctx context.Context, in *CreateMissionRequest, opts ...grpc.CallOption) (*MissionReply, error) {
	out := new(MissionReply)
	err := c.cc.Invoke(ctx, "/RPC/CreateMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) OpenMission(ctx context.Context, in *MissionRequest, opts ...grpc.CallOption) (*MissionReply, error) {
	out := new(MissionReply)
	err := c.cc.Invoke(ctx, "/RPC/OpenMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCServer is the server API for RPC service.
type RPCServer interface {
	// --- Clients data stream egress
	ClientStreamMissionEvents(*MissionRequest, RPC_ClientStreamMissionEventsServer) error
	ClientStreamPositions(*MissionRequest, RPC_ClientStreamPositionsServer) error
	ClientStreamHotSpots(*MissionRequest, RPC_ClientStreamHotSpotsServer) error
	// --- Server data ingress
	SourceInsertPositions(RPC_SourceInsertPositionsServer) error
	SourceInsertHotspots(RPC_SourceInsertHotspotsServer) error
	// --- Commands that will work from any context
	SendFile(context.Context, *FileUpload) (*FileReply, error)
	SendMessage(context.Context, *ChatMessageRequest) (*StatusReply, error)
	CreateFlight(context.Context, *CreateFlightRequest) (*CreateFlightResponse, error)
	// Create a new unique instance of a mission
	CreateMission(context.Context, *CreateMissionRequest) (*MissionReply, error)
	// Open the mission to check for its existence or get metadata
	OpenMission(context.Context, *MissionRequest) (*MissionReply, error)
}

// UnimplementedRPCServer can be embedded to have forward compatible implementations.
type UnimplementedRPCServer struct {
}

func (*UnimplementedRPCServer) ClientStreamMissionEvents(*MissionRequest, RPC_ClientStreamMissionEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamMissionEvents not implemented")
}
func (*UnimplementedRPCServer) ClientStreamPositions(*MissionRequest, RPC_ClientStreamPositionsServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamPositions not implemented")
}
func (*UnimplementedRPCServer) ClientStreamHotSpots(*MissionRequest, RPC_ClientStreamHotSpotsServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamHotSpots not implemented")
}
func (*UnimplementedRPCServer) SourceInsertPositions(RPC_SourceInsertPositionsServer) error {
	return status.Errorf(codes.Unimplemented, "method SourceInsertPositions not implemented")
}
func (*UnimplementedRPCServer) SourceInsertHotspots(RPC_SourceInsertHotspotsServer) error {
	return status.Errorf(codes.Unimplemented, "method SourceInsertHotspots not implemented")
}
func (*UnimplementedRPCServer) SendFile(context.Context, *FileUpload) (*FileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFile not implemented")
}
func (*UnimplementedRPCServer) SendMessage(context.Context, *ChatMessageRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (*UnimplementedRPCServer) CreateFlight(context.Context, *CreateFlightRequest) (*CreateFlightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlight not implemented")
}
func (*UnimplementedRPCServer) CreateMission(context.Context, *CreateMissionRequest) (*MissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMission not implemented")
}
func (*UnimplementedRPCServer) OpenMission(context.Context, *MissionRequest) (*MissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenMission not implemented")
}

func RegisterRPCServer(s *grpc.Server, srv RPCServer) {
	s.RegisterService(&_RPC_serviceDesc, srv)
}

func _RPC_ClientStreamMissionEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MissionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RPCServer).ClientStreamMissionEvents(m, &rPCClientStreamMissionEventsServer{stream})
}

type RPC_ClientStreamMissionEventsServer interface {
	Send(*MissionEvent) error
	grpc.ServerStream
}

type rPCClientStreamMissionEventsServer struct {
	grpc.ServerStream
}

func (x *rPCClientStreamMissionEventsServer) Send(m *MissionEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _RPC_ClientStreamPositions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MissionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RPCServer).ClientStreamPositions(m, &rPCClientStreamPositionsServer{stream})
}

type RPC_ClientStreamPositionsServer interface {
	Send(*PositionEvent) error
	grpc.ServerStream
}

type rPCClientStreamPositionsServer struct {
	grpc.ServerStream
}

func (x *rPCClientStreamPositionsServer) Send(m *PositionEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _RPC_ClientStreamHotSpots_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MissionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RPCServer).ClientStreamHotSpots(m, &rPCClientStreamHotSpotsServer{stream})
}

type RPC_ClientStreamHotSpotsServer interface {
	Send(*HotSpotEvent) error
	grpc.ServerStream
}

type rPCClientStreamHotSpotsServer struct {
	grpc.ServerStream
}

func (x *rPCClientStreamHotSpotsServer) Send(m *HotSpotEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _RPC_SourceInsertPositions_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RPCServer).SourceInsertPositions(&rPCSourceInsertPositionsServer{stream})
}

type RPC_SourceInsertPositionsServer interface {
	SendAndClose(*StatusReply) error
	Recv() (*PositionEvent, error)
	grpc.ServerStream
}

type rPCSourceInsertPositionsServer struct {
	grpc.ServerStream
}

func (x *rPCSourceInsertPositionsServer) SendAndClose(m *StatusReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rPCSourceInsertPositionsServer) Recv() (*PositionEvent, error) {
	m := new(PositionEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RPC_SourceInsertHotspots_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RPCServer).SourceInsertHotspots(&rPCSourceInsertHotspotsServer{stream})
}

type RPC_SourceInsertHotspotsServer interface {
	SendAndClose(*StatusReply) error
	Recv() (*HotSpotEvent, error)
	grpc.ServerStream
}

type rPCSourceInsertHotspotsServer struct {
	grpc.ServerStream
}

func (x *rPCSourceInsertHotspotsServer) SendAndClose(m *StatusReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rPCSourceInsertHotspotsServer) Recv() (*HotSpotEvent, error) {
	m := new(HotSpotEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RPC_SendFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUpload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).SendFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPC/SendFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).SendFile(ctx, req.(*FileUpload))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPC/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).SendMessage(ctx, req.(*ChatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_CreateFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).CreateFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPC/CreateFlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).CreateFlight(ctx, req.(*CreateFlightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_CreateMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).CreateMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPC/CreateMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).CreateMission(ctx, req.(*CreateMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_OpenMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).OpenMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPC/OpenMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).OpenMission(ctx, req.(*MissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RPC",
	HandlerType: (*RPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendFile",
			Handler:    _RPC_SendFile_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _RPC_SendMessage_Handler,
		},
		{
			MethodName: "CreateFlight",
			Handler:    _RPC_CreateFlight_Handler,
		},
		{
			MethodName: "CreateMission",
			Handler:    _RPC_CreateMission_Handler,
		},
		{
			MethodName: "OpenMission",
			Handler:    _RPC_OpenMission_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStreamMissionEvents",
			Handler:       _RPC_ClientStreamMissionEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamPositions",
			Handler:       _RPC_ClientStreamPositions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamHotSpots",
			Handler:       _RPC_ClientStreamHotSpots_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SourceInsertPositions",
			Handler:       _RPC_SourceInsertPositions_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SourceInsertHotspots",
			Handler:       _RPC_SourceInsertHotspots_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pb/rpc.proto",
}
